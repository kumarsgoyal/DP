/*  
  question:-
  Given a value N, if we want to make change for N cents, and we have infinite supply
  of each of S = { S1, S2, .. , Sm} valued coins, how many ways can we make the
  change? The order of coins doesnâ€™t matter.
  For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},
  {1,1,2},{2,2},{1,3}. So output should be 4. For N = 10 and S = {2, 5, 3, 6},
  there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}.
  So the output should be 5.
*/

#include <stdio.h>
#include <stdlib.h>

int func(int a[], int n, int num)
{
	int **c = (int **)malloc(sizeof(int *) * (n+1));
	for(int i = 0; i < n+1; i++)
		c[i] = (int *)malloc(sizeof(int) * (num+1));

	// 0,1,2,3,4,5,6,7,8,9,10 for 10
	// 0 column all 1
	for(int i = 0; i < n+1; i++)
		c[i][0] = 1;

	// 0,1,2,5 coins rows
	// make 0th row coins all zero
	for(int i = 0; i < num+1; i++)
		c[0][i] = 0;

	//compute rest all
	for(int i = 1; i < n+1; i++)
	{
		for(int j = 1; j < (num+1); j++)
		{
      // if coin of x and make total of 1,2,... upto (x-1) copy above value
			if(a[i-1] > j)
			{
				c[i][j] = c[i-1][j];
			}
			else
			{
				// Count of solutions excluding a[i-1]
				int x = c[i-1][j];

				// Count of solutions including a[i-1]  
				int y = c[i][j - a[i-1]];
				c[i][j] = x+y;
			}

		}
	}

	return c[n][num];
}

int main()
{
	int num = 10; // total value
	int arr[] = {1,2,5}; // array of coins
	int size = (sizeof(arr))/(sizeof(arr[0])); // size of coin array

	printf("%d\n",func(arr, size, num));
	return 0;
}
